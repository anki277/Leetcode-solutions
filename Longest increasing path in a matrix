class Solution {
    public int longestIncreasingPath(int[][] matrix) {
          int max = 1;
        int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        int[][] dp = new int[matrix.length][matrix[0].length];
        
        for(int i = 0; i < matrix.length; i++) {
            for(int j = 0; j < matrix[0].length; j++) {
                max = Math.max(max, dfs(matrix, i, j, dp, dir));
            }
        }       
        return max;
    }
    
    public static int dfs(int[][] matrix, int i, int j, int[][] dp, int[][] dir){
        
        if(dp[i][j] != 0) 
            return dp[i][j];
        
        int max = 0;
        for(int d = 0;  d < dir.length; d++) {    
            int x = i + dir[d][0];
            int y = j + dir[d][1];
            
            if(x >= 0 && x < matrix.length && y >= 0 && y < matrix[0].length && matrix[x][y] > matrix[i][j]){
                max = Math.max(max, dfs(matrix, x, y, dp, dir));
            }
        }
        return dp[i][j] = max + 1;
    }
}
