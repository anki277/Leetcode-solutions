import java.util.*;
import java.io.*;
import java.lang.*;

class gfg
{
    public static void main(String args[])throws IOException
    {
        //reading input using BufferedReader class
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        
        //reading total testcases
        int t = Integer.parseInt(read.readLine());
        
        while(t-- > 0)
        {
            //reading number of elements and weight
            int n = Integer.parseInt(read.readLine());
            int w = Integer.parseInt(read.readLine());
            
            int val[] = new int[n];
            int wt[] = new int[n];
            
            String st[] = read.readLine().trim().split("\\s+");
            
            //inserting the values
            for(int i = 0; i < n; i++)
              val[i] = Integer.parseInt(st[i]);
             
            String s[] = read.readLine().trim().split("\\s+"); 
            
            //inserting the weigths
            for(int i = 0; i < n; i++)
              wt[i] = Integer.parseInt(s[i]);
              
            //calling method knapSack() of class Knapsack
            System.out.println(new Solution().knapSack(w, wt, val, n));
        }
    }
}



// } Driver Code Ends


class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int N) 
    { 
          int dp[][] = new int[N + 1][W + 1]; 
    
    // Loop to initially filled the 
    // table with -1 
    for(int i = 0; i < N + 1; i++)   
        for(int j = 0; j < W + 1; j++)   
            dp[i][j] = -1;    
    
    return knapSackRec(W, wt, val, N, dp); // your code here 
    } 
      static int max(int a, int b) 
    { 
      return (a > b) ? a : b; 
    }
    static int knapSackRec(int W, int wt[], int val[], int N,int [][]dp)
{   
    
    // Base condition
    if (N == 0 || W == 0)   
        return 0;
        
    if (dp[N][W] != -1)
        return dp[N][W];   
    
    if (wt[N - 1] > W)   
    
        // Store the value of function call   
        // stack in table before return
        return dp[N][W] = knapSackRec(W, wt, val, 
                                      N - 1, dp);
                                      
    else 
    
    
        // Return value of table after storing  
        return dp[N][W] = max((val[N - 1] + 
                              knapSackRec(W - wt[N - 1], wt,
                                          val, N - 1, dp)),
                              knapSackRec(W, wt, val, 
                                          N - 1, dp));             
}
}


